package com.protomapper.compile

import org.apache.lucene.search.Query;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.PhraseQuery;
import org.apache.lucene.search.MultiPhraseQuery;
import org.apache.lucene.search.BooleanClause.Occur

/*
 * Classes related to parsing and compiling
 */
abstract class re
case class Choice(fst:re, snd:re) extends re
case class Term(fst:List[re]) extends re
case class Factor(fst:re) extends re
case class Concat(fst:re, snd:re) extends re
case class LenRange(frm:Int,to:Int,base:re) extends re
case class Range(comp:Boolean, subRanges:List[SubRange]) extends re
case class Str(fst:String) extends re
case class Wild extends re
abstract class SubRange extends re
case class SubRangeChar(fst:Char) extends SubRange
case class SubRangeMulti(fst:Char,snd:Char) extends SubRange

/*
 * Creates a query from the abstract syntax tree generated by PatternParser
 */
class PatternCompiler(parser:PatternParser) {
  
  private def _compile(ast:re):Query = {
    ast match {
      case Choice(fst,snd) => {
        val out = new BooleanQuery()
        out.add(_compile(fst),Occur.SHOULD)
        out.add(_compile(snd),Occur.SHOULD)
        return out
      }
      case Term(fst) => {
        
      } 
    }
    
    0
  }
}


/*
 * Creates an abstract syntax tree from input searches
 * Supports ., {\d,\d}, [^X], [XY], ^, |
 * 
 * re -> simpleRe
 * re -> simpleRe (or) re
 * simpleRe -> factor | factor simpleRe
 * factor -> character | . | range | (re)                                                                          
 * character -> nonSpecialChar | anyChar
 * nonSpecialChar -> sigma - set([,],(,),|)
 * anyChar -> a <- sigma
 * range -> [ optCompliment subRanges ]
 * subRanges -> subRange | subRange subRanges
 * subRange -> character | character - character
 * 
 */
class PatternParser() {
  var parseString = ""
    val specialChars = "()*?|[]{}+"
    val EOFChar = ';'
  parseString = parseString.replaceAll(" ","")//remove whitespace
  
  def parse(str:String):re = {
    parseString = str
    this.regex()
  }
  
  def peek():Char = {
    println("peek: "+parseString)
    if(parseString.length() > 0){
    	return parseString.head
    }
    else {
      return EOFChar
    }
  }
  
  def next():Char = {
    println("next: "+parseString)
    val ret = parseString.head
    parseString = parseString.tail
    println("post-next: "+parseString)
    ret
  }
  def eat(check:Char) = {
    println("eat: "+parseString)
    val nxt = this.peek()
    if(nxt == check){
      this.next()
    } else {
      throw new TokenException("Expected "+check+" got "+nxt)
    }
  }
  def more():Boolean = {
    return parseString.length() > 0
  }
  
  def regex():re = {
    println("regex")
    val term = this.term()
    if(more() & peek() == '|') {
      eat('|')
      return Choice(term,regex())
    }
    else {
      return term
    }
  }
  
  def term():re = {
    println("term")
    var fac = List[re]()
    while(more() & peek() != '|' & peek() != ')'){
      val nxt = factor()
      fac = fac :+ nxt //O(n) complexity, should be optimized someday
    }
    Term(fac)
  }
  def factor():re = {
    println("factor")
    val base = this.base()
    println("factor2")
    while(more() & peek() == '{'){
      println("factor::{")
      eat('{')
      val lenRng = this.lenRng(base)
      eat('}')
      return lenRng
    }
    return base
  }
  def lenRng(base:re):LenRange = {
    val regex = """(\d+),(\d+).*""".r
    println("lenRange")
    parseString match {
      case regex(from,to) => {
        println("matches")
        val nChars = from.length()+to.length()+1 //digits+comma
        for(i <- 0 until nChars)
          next()
        return LenRange(from.toInt,to.toInt,base)
      }
    }
    throw new TokenException("Length Range Invalid")
  }
  
  def rng():Range = {
    var comp = false;
    if(!more()) {
      throw new TokenException("Unexpected end of input")
    }
    if(peek() == '^'){
      comp = true
      eat('^')
    }
    var subRanges = List[SubRange]()
    while( more() & ! (specialChars contains peek()) ){
      subRanges = this.subRng()::subRanges
    }
    return Range(comp,subRanges)
  }
  
  def subRng():SubRange = {
    val nxt = peek()
    val regex = """(\w)-(\w).*""".r
    parseString match {
      case regex(w1,w2) => {
        next()
        next()
        next()
        return SubRangeMulti(w1(0),w2(0))
      }
      case _ => {
        if(!(specialChars contains nxt)){
          return SubRangeChar(next())
        } else {
          throw new TokenException("Unexpected Character in sub range")
        }
      }
    }
  }
  def base():re = {
    println("base")
    val nxt = peek()
    var out = "";
    if(nxt == '(') {
      println("base::(")
      eat('(')
      val r = this.regex()
      println("base::post(")
      eat(')')
      return r
    } else if(nxt == '[') {
      eat('[')
      val rng = this.rng()
      eat(']')
      return rng
    } else {
      println(s"base::else ${!(specialChars contains peek())}")
      if( more() & !(specialChars contains peek()) ){
        println("base::else::if1")
        out += next()
      }
      if( out.length() > 0 ){
        println(s"base::else::if2 -- ${more()} -- ${out.length}")
        if(out != ".") {
        	return Str(out)         
        } else {
        	return Wild()
        }
      }
      throw new TokenException(s"Unexpected Token ${peek()}")
    }
  }
}

case class EndOfInput(msg:String) extends Exception
case class TokenException(msg:String) extends Exception







